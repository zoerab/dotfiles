# This file is automatically generated, DO NOT MODIFY.
"TRUE","TCP // TCP SYN","tcp.flags eq 0x002",""
"TRUE","TCP // TCP SYN/ACK","tcp.flags eq 0x012",""
"TRUE","TCP // TCP SYNs no MSS","tcp.flags eq 0x002 and !tcp.options.mss_val","Packets without MSS might be an indication of scanning (fingerprinting most of the time)"
"TRUE","TCP // TCP ACK","tcp.flags eq 0x010",""
"TRUE","TCP // TCP-analysis","tcp.analysis.flags",""
"TRUE","TCP // TCP Contains","tcp contains *","Replace asterisk (*) with your searchterm"
"TRUE","TCP // TCP Weird Resets","((tcp.flags.reset eq 1) && (tcp.seq eq 1)) && (tcp.ack eq 1)",""
"TRUE","TCP // TCP No Flags","tcp.flags == 0x000",""
"TRUE","TCP // FIN_PSH_URG","tcp.flags == 0x029",""
"TRUE","TCP // TCP Open ports","(tcp.flags.syn eq 1) && (tcp.flags.ack eq 1) and ip.dst == 255.255.255.255","Specify the IP by replacing 255.255.255.255 with the destination IP"
"TRUE","DNS // DNS everything","udp.port eq 53 or tcp.port eq 53 or ipv6.nxt eq 44 or ip.flags.mf eq 1",""
"TRUE","DNS // DNS and MDNS","udp.port eq 53 or tcp.port eq 53 or ipv6.nxt eq 44 or ip.flags.mf eq 1 or mdns",""
"TRUE","DNS // DNS queries only","dns.flags.response eq 0",""
"TRUE","DNS // DNS responses only","dns.flags.response eq 1",""
"TRUE","DNS // Public DNS everything","(dns.flags.response eq 1 and !(ip.src == 10.0.0.0/8 or ip.src == 172.16.0.0/12 or ip.src == 192.168.0.0/16) && !mdns) || (dns.flags.response ==  0 and !(ip.dst == 10.0.0.0/8 or ip.dst == 172.16.0.0/12 or ip.dst == 192.168.0.0/16) && !mdns )",""
"TRUE","DNS // Public DNS queries only","dns.flags.response eq  0 and !(ip.dst == 10.0.0.0/8 or ip.dst == 172.16.0.0/12 or ip.dst == 192.168.0.0/16) && !mdns","Follow UDP stream to see the response(s)"
"TRUE","DNS // Public DNS responses only","dns.flags.response eq 1 and !(ip.src == 10.0.0.0/8 or ip.src == 172.16.0.0/12 or ip.src == 192.168.0.0/16) && !mdns",""
"TRUE","DNS // Large DNS responses","dns.flags.response eq  1 and ip.len > 500",""
"TRUE","DNS // High Answer Count","dns.count.answers > 10",""
"TRUE","HTTP // HTTP(S)","(http.request or http.response or tls.handshake.type eq 1)",""
"TRUE","HTTP // Basic","(http.request or http.response or tls.handshake.type eq 1) and !(ssdp)",""
"TRUE","HTTP // Basic+","(http.request or http.response or tls.handshake.type eq 1 or tcp.flags eq 0x0002) and !(ssdp)",""
"TRUE","HTTP // Basic+DNS","(http.request or http.response or tls.handshake.type eq 1 or tcp.flags eq 0x0002 or dns) and !(ssdp)",""
"TRUE","HTTP // GET","http.request.method eq \x22GET\x22",""
"TRUE","HTTP // POST","http.request.method eq \x22POST\x22",""
"TRUE","HTTP // User-Agent info","http.user_agent",""
"TRUE","HTTP // HTTP(S) with 8080","(http.request or tls.handshake.type == 1) and tcp.port in {80,443,8080}",""
"TRUE","HTTP // TLS","tls or ssl",""
"TRUE","HTTP // TLS Handshakes","tls.handshake",""
"TRUE","HTTP // TLS Certificate","tls.handshake.type == 11",""
"TRUE","HTTP // TLS Client Hello","tls.handshake.type == 1",""
"TRUE","HTTP // TLS Server Hello","tls.handshake.type == 2",""
"TRUE","HTTP // TLS JA3 or JA4 fingerprints","(tls.handshake.ja3) || (tls.handshake.ja4)",""
"TRUE","GEO // NOT Belgium","!(ip.geoip.country_iso == \x22BE\x22 or ipv6.geoip.country_iso == \x22BE\x22)",""
"TRUE","GEO // Russia","(ip.geoip.country_iso == \x22RU\x22 or ipv6.geoip.country_iso == \x22RU\x22)",""
"TRUE","GEO // China","(ip.geoip.country_iso == \x22CN\x22 or ipv6.geoip.country_iso == \x22CN\x22)",""
"TRUE","GEO // North Korea","(ip.geoip.country == \x22North Korea\x22 or ipv6.geoip.country == \x22North Korea\x22)",""
"TRUE","GEO // Iran","(ip.geoip.country_iso == \x22IR\x22 or ipv6.geoip.country_iso == \x22IR\x22)",""
"TRUE","GEO // Brazil","(ip.geoip.country == \x22Brazil\x22 or ipv6.geoip.country == \x22Brazil\x22)",""
"TRUE","GEO // Poland","(ip.geoip.country == \x22Poland\x22 or ipv6.geoip.country == \x22Poland\x22)",""
"TRUE","GEO // India","(ip.geoip.country == \x22India\x22 or ipv6.geoip.country == \x22India\x22)",""
"TRUE","GEO // Vietnam","(ip.geoip.country == \x22Vietnam\x22 or ipv6.geoip.country == \x22Vietnam\x22)",""
"TRUE","GEO // Nigeria","(ip.geoip.country == \x22Nigeria\x22 or ipv6.geoip.country == \x22Nigeria\x22)",""
"TRUE","GEO // US","(ip.geoip.country_iso == \x22US\x22 or ipv6.geoip.country_iso == \x22US\x22)",""
"TRUE","GEO // Troublesome locations","ip.geoip.dst_country_iso in {\x22UA\x22,\x22CN\x22,\x22RU\x22,\x22KP\x22,\x22IL\x22,\x22PK\x22,\x22BR\x22,\x22IR\x22,\x22NG\x22}",""
"TRUE","MAIL // All clear text","(smtp or tcp.port eq 25) or (imap or tcp.port eq 143) or (pop or tcp.port eq 110)",""
"TRUE","MAIL // POP // POP basic","tcp.port eq 110 and tcp.flags eq 0x0002",""
"TRUE","MAIL // SMTP // SMTP basic","smtp.req.command",""
"TRUE","MAIL // SMTP // SMTP basic+","smtp.data.fragment or smtp.req.command",""
"TRUE","MAIL // SMTP // SMTP data","smtp.data.fragment",""
"TRUE","MAIL // SMTP // SMTP FROM field","smtp contains \x22From:\x22",""
"TRUE","ATTACK // ARP poisoning","arp.duplicate-address-detected or arp.duplicate-address-frame","arpspoof, ettercap"
"TRUE","ATTACK // ICMP flood","icmp and data.len > 48","fping, hping"
"TRUE","ATTACK // VLAN hoping","dtp or vlan.too_many_tags","frogger, yersinia"
"TRUE","ATTACK // Unexplained packet loss","tcp.analysis.lost_segment or tcp.analysis.retransmission","n/a"
"TRUE","ATTACK // WLAN Client deauthentication","wlan.fc.type_subtype == 12","aireplay-ng, mdk3, mdk4"
"TRUE","ATTACK // WLAN Client disassociation","wlan.fc.type_subtype == 10","mdk3, mdk4"
"TRUE","ATTACK // WLAN Fake AP beacon flood","wlan.fc.type_subtype == 8","mdk3, mdk4"
"TRUE","ATTACK // WLAN Authentication DoS","wlan.fc.type_subtype == 11","mdk3, mdk4"
"TRUE","ATTACK // Shell / Python scripts","frame matches \x22bin\x22 || frame matches \x22bash\x22 || frame matches \x22sh\x22 || frame matches \x22python\x22",""
"TRUE","SCAN // ARP scan","arp.dst.hw_mac==00:00:00:00:00:00","arp-scan -l"
"TRUE","SCAN // IP scan","icmp.type == 3 and icmp.code == 2","nmap -sO <target>"
"TRUE","SCAN // ICMP ping sweep","icmp.type == 8 or icmp.type == 0","nmap -sn -PE <subnet>"
"TRUE","SCAN // TCP ping sweep","tcp.dstport == 7","nmap -sn -PS/-PA <subnet>"
"TRUE","SCAN // UDP ping sweep","udp.dstport == 7","nmap -sn -PU <subnet>"
"TRUE","SCAN // TCP SYN scan","tcp.flags.syn == 1 and tcp.flags.ack == 0 and tcp.window_size <= 1024","nmap -sS <target>"
"TRUE","SCAN // TCP Connect scan","tcp.flags.syn == 1 and tcp.flags.ack == 0 and tcp.window_size > 1024","nmap -sT <target>"
"TRUE","SCAN // TCP Null scan","tcp.flags == 0","nmap -sN <target>"
"TRUE","SCAN // TCP FIN scan","tcp.flags == 0x001","nmap -sF <target>"
"TRUE","SCAN // TCP Xmas scan","tcp.flags.fin == 1 && tcp.flags.push == 1 && tcp.flags.urg == 1","nmap -sX <target>"
"TRUE","SCAN // UDP port scan","icmp.type == 3 and icmp.code == 3","nmap -sU <target>"
"TRUE","SCAN // NMAP stealth","tcp.window_size_value == 1024 and tcp.flags.syn == 1",""
"TRUE","SCAN // General Scan detection","tcp.completeness <= 39",""
"TRUE","SCAN // Strange TTLs","ip.ttl < 50 and ip.ttl>30","Strange TTLs might indicate OS fingerprinting"
"TRUE","MISC // ARP requests","arp.opcode == 1",""
"TRUE","MISC // ARP replies","arp.opcode == 2",""
"TRUE","MISC // BT // Bittorent general","bt-dht || bt-utp || bittorrent",""
"TRUE","MISC // BT // BT-DHT with INFO_HASH","bt-dht.bencoded.string == \x22info_hash\x22",""
"TRUE","MISC // DESKTOP+LAPTOP","frame matches \x22desktop\x22 || frame matches \x22laptop\x22",""
"TRUE","MISC // DHCP // DHCP basic","dhcp or dhcpv6","bootp - deprecated in favor of dhcp"
"TRUE","MISC // DHCP // DHCP Hostname","dhcp.option.hostname","Option: (12) Host Name"
"TRUE","MISC // FTP // FTP basic","ftp.request.command or ftp-data",""
"TRUE","MISC // FTP // FTP login incorrect","ftp.response.code == 530",""
"TRUE","MISC // Frame matches","frame matches *","Matches is NOT case sensitive while contains is case sensitive"
"TRUE","MISC // ICMP // ICMP responses","icmp.type == 0 or icmpv6.type == 0",""
"TRUE","MISC // Kerberos CNAME","kerberos.CNameString","CNameString values for hostnames always end with a $ (dollar sign), while user account names do not."
"TRUE","MISC // Lateral Movement","ip.src == 1.1.1.1 && (ip.addr == 192.168.0.0/16 || ip.addr == 172.16.0.0/12 || ip.addr == 10.0.0.0/8 ) and !(icmp)","Replace 1.1.1.1 with the suspicious IP"
"TRUE","MISC // LDAP","ldap or cldap",""
"TRUE","MISC // LLMNR","llmnr",""
"TRUE","MISC // LLMNR+MDNS+NBNS","llmnr || mdns || nbns",""
"TRUE","MISC // Malformed packets","_ws.malformed",""
"TRUE","MISC // NBNS+","nbns.flags.opcode eq 5 or nbns.flags.opcode eq 8",""
"TRUE","MISC // No B/C","!(eth.addr == ff:ff:ff:ff:ff:ff or arp or icmp or stp)","Filtering out static like: arp broadcasts, ICMP and STP"
"TRUE","MISC // NetBIOS Names","nbns","NetBIOS Name Service - Additional records - Name"
"TRUE","MISC // Ports shown as open","tcp.flags.syn eq 1 and tcp.flags.ack eq 1 && ip.src == 0.0.0.0","This filter show all responses from a target IP with the indication of open ports (replace 0.0.0.0 with target IP)"
"TRUE","MISC // Windows executables","frame contains \x22DOS mode\x22 or frame contains \x22MZ\x22",""
"TRUE","MISC // FTP // FTP login CORRECT","ftp.response.code == 230",""
