# Basic stuff
alias cp="cp -i"
alias chat="cheat"
alias df="df -h"
alias dirs="dirs -v"
alias egrep="egrep --color=auto"
alias fgrep="fgrep --color=auto"
alias fman="compgen -c | fzf | xargs man"
alias free="free -m"
alias pf="fzf --preview='bat --color=always --style=numbers {} || cat {}' --bind shift-up:preview-page-up,shift-down:preview-page-down"
alias grep="grep --color=always"
alias egrep="egrep --color=always"
alias fgrep="fgrep --color=always"
alias ef='nvim $(fzf --preview="bat --color=always {}")'
alias hexedit="hexedit --color"
alias ip="ip --color=auto"
alias less="less --RAW-CONTROL-CHARS"
# alias ll="lsd -lah --color=always --group-directories-first"
# alias ll="eza -lahg --icons --color=always --group-directories-first --extended"
alias ll="eza -lahg --octal-permissions --icons --color=always --group-directories-first"
alias lstree='lsd --tree --long'
alias lynx="lynx -vikeys"
alias mkdir="mkdir -p"
alias mtr="sudo mtr"
alias my_user_agent='curl -s https://www.whatismybrowser.com/detect/what-is-my-user-agent/ | grep "detected_value" | cut -d ">" -f2 | cut -d "<" -f1'
alias strings="strings -n 3"
alias mv="mv -i"
alias rm="rm -i"
alias top="top -u "$USER" -d 5 -o %CPU"
alias tree="tree -a"
alias v="nvim"
# alias vi="nvim"
# alias vim="nvim"
alias mvp="mpv"
alias restartplasma="kquitapp5 plasmashell && kstart5 plasmashell"

# Custom stuff
#alias 4chandl="wget -qe robots=off -rHDi.4cdn.org -nc -nd -ERs.jpg,html --show-progress"
alias 1111="ping -c 4 1.1.1.1"
alias bt="wget http://cachefly.cachefly.net/100mb.test -O /dev/null"
alias extip="curl ipecho.net/plain; echo"
alias file-gitignore="wget -O .gitignore https://gist.githubusercontent.com/zoerab/ac336f006e952c6dbf01/raw/1a7caecd54b9ba4310c2b1b5594878927af85415/.gitignore"
alias flushdns='sudo systemctl restart nscd'
alias hl="rg --passthru"
alias gitfixlast="git add . && git commit --amend --no-edit && git push -f"

# YAZI CLI file manager with a few tweaks
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# MAC OUI search
function ouisearch() {
  curl -s -N "https://gitlab.com/wireshark/wireshark/-/raw/master/manuf" | grep -i "$1"
}

# AWK wrapper for grabbing fields
function field() {
	awk -F "${2:- }" "{ print \$${1:-1} }"
}

# Total: Sum numeric values from a specified column (default: column 1, space delimiter)
# for TAB delimiter use -> $'\t'
total() {
  awk -F "${2:- }" '
    {
      col = $'"${1:-1}"'
      if (col ~ /^-?[0-9]+([.][0-9]+)?$/) s += col
    }
    END { print s }
  ' "${@:3}"
}

# Get TOP process eating CPU
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'

# Get error messages from journalctl
alias jctl="sudo journalctl -p 3 -xb"

# Git
alias fuck="git reset --hard && git clean -df"
alias gaa="git add ."
alias gc="git commit -m "
alias ghist="git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short"
alias ghistlog="git log --graph --full-history --all --color --pretty=format:'%x1b[31m%h%x09%x1b[32m %C(white)- %d%x1b[0m%x20%s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --date=relative"
alias gl="git log"
alias gp="git push"
alias gs="git status"

# Termbin
alias tb="nc termbin.com 9999"
alias tbc="nc termbin.com 9999 | xclip -selection clipboard"

# Copy/Paste
# alias pbcopy="xclip -selection clipboard"
# alias pbpaste="xclip -selection clipboard -o"
alias pbcopy="wl-copy -n"
alias pbpaste="wl-paste -n"

# Fix files with white spaces in their names
fixspace() {
  [ -z "$1" ] && echo "Usage: rename_fixspace \"file name with spaces\"" && return 1
  new_name="${1// /_}"
  mv "$1" "$new_name"
  echo "Renamed: '$1' â†’ '$new_name'"
}

# yt-dlp
alias yt="yt-dlp --add-metadata"
alias yta-aac="yt-dlp --extract-audio --audio-format aac "
alias yta-best="yt-dlp --extract-audio --audio-format best "
alias yta-flac="yt-dlp --extract-audio --audio-format flac "
alias yta-m4a="yt-dlp --extract-audio --audio-format m4a "
alias yta-mp3="yt-dlp --extract-audio --audio-format mp3 "
alias yta-opus="yt-dlp --extract-audio --audio-format opus "
alias yta-vorbis="yt-dlp --extract-audio --audio-format vorbis "
alias yta-wav="yt-dlp --extract-audio --audio-format wav "
alias ytv-best='yt-dlp --format "bestvideo+bestaudio/best"' 

# Add new ip host pair to /etc/hosts (ex.: addhost 127.0.0.1 host.domain.local)
function addhost() {
    if [[ "$1" && "$2" ]]; then
        IP=$1
        HOSTNAME=$2

        if [ -n "$(grep "$HOSTNAME" /etc/hosts)" ]; then
            echo "$HOSTNAME already exists:"
            echo "$(grep $HOSTNAME /etc/hosts)"
        else
            echo "Adding $HOSTNAME to your /etc/hosts"
            printf "%s\t%s\n" "$IP" "$HOSTNAME" | sudo tee -a /etc/hosts >/dev/null

            if [ -n "$(grep "$HOSTNAME" /etc/hosts)" ]; then
                echo "$HOSTNAME was added succesfully:"
                echo "$(grep $HOSTNAME /etc/hosts)"
            else
                echo "Failed to Add $HOSTNAME, Try again!"
            fi
        fi
    else
        echo "Error: missing required parameters."
        echo "Usage: "
        echo "  addhost ip domain"
    fi
}

# Defang an IP or FQDN
defang() {
	local ip="$1"
    echo "${ip//./[.]}"
}

# Check for unsigned kernel modules
function checkForUnsignedKernelMods() {
  for mod in $(lsmod | tail -n +2 | cut -d' ' -f1); do modinfo ${mod} | grep -q "signature" || echo "no signature for module: ${mod}" ; done
}

# Lookup JA3 SSL/TLS signature
function ja3lookup() {
    curl -s -X GET "https://ja3er.com/search/$1" | jq
}


# Showoff colors
function showcolors() {
  for i in {0..255}; do print -Pn "%K{$i}  %k%F{$i}${(l:3::0:)i}%f " ${${(M)$((i%6)):#3}:+$'\n'}; done
}

# Remove specified host from /etc/hosts
function removehost() {
    if [[ "$1" ]]; then
        HOSTNAME=$1

        if [ -n "$(grep "$HOSTNAME" /etc/hosts)" ]; then
            echo "$HOSTNAME Found in your /etc/hosts, Removing now..."
            sudo sed -i".bak" "/$HOSTNAME/d" /etc/hosts
        else
            echo "$HOSTNAME was not found in your /etc/hosts"
        fi
    else
        echo "Error: missing required parameters."
        echo "Usage: "
        echo "  removehost domain"
    fi
}

# Auto list files in directory once in it
function chpwd() {
    emulate -L zsh
    ll
}

# Cheatsheets FTW
function cheat() {
    curl cheat.sh/"$*"
}

# Extracting common file formats (by DT)
SAVEIFS=$IFS
IFS=$(echo -en "\n\b")

function extract {
 if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
 else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
          case "${n%,}" in
            *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.cbr|*.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.cbz|*.epub|*.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *.cpio)      cpio -id < ./"$n"  ;;
            *.cba|*.ace)      unace x ./"$n"      ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
          esac
      else
          echo "'$n' - file does not exist"
          return 1
      fi
    done
fi
}

# Scrap a site (beta)
function scrapsite() {
    wget -e robots=off --recursive --page-requisites --adjust-extension --span-hosts --convert-links --restrict-file-names=windows --domains "$1"--no-parent "$1"
}

IFS=$SAVEIFS

# Pretty CSV viewer
function pretty_csv {
    #column -t -s, -n "$@" | less -F -S -X -K
    perl -pe 's/((?<=,)|(?<=^)),/ ,/g;' "$@" | column -t -s, | less  -F -S -X -K
}

# Pretty TSV viewer
function pretty_tsv {
    perl -pe 's/((?<=\t)|(?<=^))\t/ \t/g;' "$@" | column -t -s $'\t' | less  -F -S -X -K
}

# Showing weather
function weather() {
    curl -4 "http://wttr.in/$1"
}

# Make pretty looking messages
function print_good() {
    echo -e "\x1B[01;32m[+]\x1B[0m" "$1"
}

function print_error() {
    echo -e "\x1B[01;31m[+]\x1B[0m" "$1"
}

function print_info() {
    echo -e "\x1B[01;34m[+]\x1B[0m" "$1"
}


# Zeek stuff
#
# Requirements: zeek, datamash
#

## General zeek-log viewing
function zeek_view() {
    sed 's/#fields\t//g; s/#types\t//g' "$1" | less -Sx25
}

## Cumulative talk time (from conn.log entries, top 10 talkers)
function zeek_sort_duration() {

    if [[ ( $@ == "--help") ||  $@ == "-h" ]]
    then
        echo "Usage: zeek_sort_duration <conn.log>" # zeek_sort_duration conn.log
        return
    fi

    FILE_TO_READ=${1:-conn.log} # By default zeek creates conn.log file when it parses pcap/pcapng

    cat "$FILE_TO_READ" | zeek-cut id.orig_h id.resp_h duration | sort | grep -v -e '^$' -e '-' | datamash -g 1,2 sum 3 | sort -k 3 -rn | head | column -t -s $'\t'
}

## Look for odd HTTP user agents
function zeek_count_user_agents() {

    if [[ ( $@ == "--help") ||  $@ == "-h" ]]
    then
        echo "Usage: zeek_count_user_agent <http.log> <OPTIONAL:IP address>" # zeek_count_user_agents <http.log> <192.168.100.100>
        return
    fi

    FILE_TO_READ=${1:-http.log} # By default zeek creates http.log file when it parses pcap/pcapng
    IP=${2:-}                   # OPTIONAL: Target IP adres

    cat "$FILE_TO_READ" | zeek-cut id.orig_h id.resp_h user_agent | grep "$IP" | sort | uniq | cut -f 3 | sort | uniq -c | sort -rn
}

## Certificate check
function zeek_cert_check() {

    if [[ ( $@ == "--help") ||  $@ == "-h" ]]
    then
        echo "Usage: zeek_cert_check <ssl*.log>" # zeek_cert_check ssl*.log
        return
    fi

    FILE_TO_READ=${1:-"ssl.log"} # By default zeek creates ssl.log file(s) when it parses pcap/pcapng

    cat "$FILE_TO_READ" | zeek-cut id.orig_h id.resp_h id.resp_p validation_status | grep 'self signed' | sort | uniq
}

## Certificate issuer check
function zeek_cert_issuer_check() {

    if [[ ( $@ == "--help" ) || $@ == "-h" ]]
    then
        echo "Usage: zeek_cert_issuer_check <ssl*.log>" # zeek_cert_issuer ssl*.log
        return
    fi

    FILE_TO_READ=${1:-"x509.log"} # By default zeek creates x509.log file(s) when it parses pcap/pcapng

    cat "$FILE_TO_READ" | zeek-cut certificate.issuer | grep -v -e '^[[:space:]]*$' | sort | uniq
}

## TODO
# JA3/JA3S implementation
# cat ssl.log | zeek-cut -M -F '|' ja3 ja3s


## Session size check
function zeek_session_size() {

    if [[ ( $@ == "--help") ||  $@ == "-h" ]]
    then
        echo "Usage: zeek_session_size <conn.log> <IP source> <IP destination>" # zeek_session_size conn.log <192.168.100.100> <1.1.1.1>
        return
    fi

    FILE_TO_READ=${1:-"conn.log"} # By default zeek creates conn.log file(s) when it parses pcap/pcapng
    IP_SRC="$2"
    IP_DST="$3"

    cat "$FILE_TO_READ" | zeek-cut id.orig_h id.resp_h orig_bytes | grep "$IP_SRC" | grep "$IP_DST" | sort | uniq -c | sort -rnk 4
}


# TShark stuff
#
# Requirements: tshark, xxd
#
## Counting FQDNs per domain
function tshark_count_fqdn_per_domain() {

    if [[ ( $@ == "--help") ||  $@ == "-h" || -z "$@" ]]
    then
        echo "Usage: tshark_count_fqdn_per_domain <capture.pcapng>" # tshark_count_fqdn_per_domain mycapture.pcapng
        return
    fi

    tshark -r "$1" -T fields -e dns.qry.name | sort | uniq | rev | cut -d '.' -f 1-2 | rev | sort | uniq -c | sort -rn | head -10
}

## Show all instances of unique FQDNs queried
function tshark_show_fqdn() {
    if [[ ( $@ == "--help") ||  $@ == "-h" || -z "$@" ]]
    then
        echo "Usage: tshark_show_fqdn <capture.pcapng>" # tshark_show_fqdn mycapture.pcapng
        return
    fi

    tshark -r "$1" -T fields -e dns.qry.name | sort | uniq | head -10
}

## Show all instances of unique FQDNs queried (reversed)
function tshark_show_rev_fqdn() {
    if [[ ( $@ == "--help") ||  $@ == "-h" || -z "$@" ]]
    then
        echo "Usage: tshark_show_rev_fqdn <capture.pcapng>" # tshark_show_rev_fqdn mycapture.pcapng
        return
    fi

    tshark -r "$1" -T fields -e dns.qry.name | sort | uniq | rev | head -10
}

## Show data in packets (ICMP exfil)
function tshark_icmp_data() {
    if [[ ( $@ == "--help") ||  $@ == "-h" || -z "$@" ]]
    then
        echo "Usage: tshark_packet_data <capture.pcapng>" # tshark_show_rev_fqdn mycapture.pcapng
        return
    fi

    tshark -r "$1" -n -T fields -Y data.data -e data.data | xxd -r -p | less -S
}

## Show data in packets (UDP exfil)
function tshark_udp_data() {
    if [[ ( $@ == "--help") ||  $@ == "-h" || -z "$@" ]]
    then
        echo "Usage: tshark_packet_data <capture.pcapng>" # tshark_show_rev_fqdn mycapture.pcapng
        return
    fi

    tshark -r "$1" -T fields -e udp.payload | xxd -r -p | less -S
}

## Show data in packets (TCP exfil)
function tshark_tcp_data() {
    if [[ ( $@ == "--help") ||  $@ == "-h" || -z "$@" ]]
    then
        echo "Usage: tshark_packet_data <capture.pcapng>" # tshark_show_rev_fqdn mycapture.pcapng
        return
    fi

    tshark -r "$1" -T fields -e tcp.payload | xxd -r -p | less -S
}

function mkvenv() {
    if [ -z "$1" ]; then
        echo "Usage: mkvenv <env_name>"
        return 1
    fi

    # Check if python3 exists
    if ! command -v python3 &>/dev/null; then
        echo "Error: python3 is not installed or not in PATH."
        return 1
    fi

    # Check if Python version is >= 3.6
    PY_VERSION=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
    REQUIRED="3.6"
    if [ "$(printf '%s\n' "$REQUIRED" "$PY_VERSION" | sort -V | head -n1)" != "$REQUIRED" ]; then
        echo "Error: Python $REQUIRED+ required (found $PY_VERSION)"
        return 1
    fi

    python3 -m venv "$1"
    echo "$1/" >> .gitignore
    touch requirements.txt
    source "$1/bin/activate"
}

